---
title: "CLAVEROTTE"
auhtor: "Théo Claverotte dit Laprima"
format: html
---

link to the github repository : https://github.com/theoclaverotte/bt_empire.git

```{r}
#| message: false
here::i_am("bt_empire.Rproj")
library(here)
library(vroom)
library(ggplot2)
library(dplyr)
library(knitr)
```

## Question 3
```{r}
#| message: false
data <- vroom("main_data/ALL%SYSTEMS.csv", row.names(FALSE))

nbr_starsystems <- nrow(data)
nbr_variables <- ncol(data)


# Chek if the data loading is a success : right number of star systems, variables
if (nbr_starsystems == 1038) {
  print("The data loading process is successful. We have the right numer of star systems which is 1038")
}else{ print("The data loading failed.")}

if (nbr_variables == 8) {
  print("The data loading process is successful. We have the right numer of variables which is 8")
}else{ print("The data loading failed.")}


# Check if all numerical variables are recognized as numerical
all(sapply(data, is.numeric))
```

## Question 4
```{r}
summary_stats <- data %>%
  summary()
# number of observations and number of variables is given by nbr_starsystem and nbr_variables
nbr_obs <-nbr_starsystems
nbr_var<-nbr_variables

missing_values_per_variable <- data %>%
  summarise(across(everything(), ~sum(is.na(.))))

observations_with_missing_values <- data %>%
  filter(rowSums(is.na(.)) > 0) %>%
  nrow()

table_data <- data.frame(
  Metric = c("Number of Observations", "Number of Variables", "Number of Missing Values (Per Variable)", "Number of Observations with at Least One Missing Value"),
  Value = c(nbr_obs, nbr_var, toString(missing_values_per_variable), observations_with_missing_values)
)
kable(table_data, format = "markdown")
```

# 2 Introductory analysis
## Question 5
```{r}
#| message: false
#| echo: false

data_without_na<-data %>%
  filter(!is.na(`RELATIVE LUMINOSITY`)) %>%
  filter(!is.na(`star radius`))
ggplot(data_without_na, aes(x = `RELATIVE LUMINOSITY`, y = `star radius`) )+ 
  geom_point() + 
  labs(title = "Radius of a Star by Luminosity",
       x = "Relative Luminosity",
       y = "Star Radius") 
```

## Question 6
extreme_stars_table <- data.frame(
  Variable = character(),
  Most_Extreme_Star = character(),
  Most_Extreme_Value = double(),
  Least_Extreme_Star = character(),
  Least_Extreme_Value = double(),
  stringsAsFactors = FALSE
)

#Boucle for à travers les variables numériques
for (i in data[1,i]) {
  # Trouver les indices des lignes avec les valeurs maximales et minimales
  idx_max <- slice_max(data, n = 1, order_by = !!sym(i))$star_name
  idx_min <- slice_min(data, n = 1, order_by = !!sym(i))$star_name

  #Extraire les noms des étoiles et les valeurs
  most_extreme_star <- slice_max(data, n = 1, order_by = !!sym(i))$star_name
  most_extreme_value <- slice_max(data, n = 1, order_by = !!sym(i))[[variable]]
  
  least_extreme_star <- slice_min(data, n = 1, order_by = !!sym(i))$star_name
  least_extreme_value <- slice_min(data, n = 1, order_by = !!sym(i))[[variable]]

  #Ajouter les résultats au dataframe
  extreme_stars_table <- bind_rows(extreme_stars_table, data.frame(
    Variable = i,
    Most_Extreme_Star = most_extreme_star,
    Most_Extreme_Value = most_extreme_value,
    Least_Extreme_Star = least_extreme_star,
    Least_Extreme_Value = least_extreme_value
  ))
}

#Afficher le tableau des résultats
print(extreme_stars_table)



We pass it, we will do it later

# 3 Factions

## Question 
```{r}
#| message: false
data_factions<- vroom("bt_factions.csv")
data_syst_ctrl<- vroom("system_control.csv")
```


## Question 9
```{r}
count_result <- data_syst_ctrl%>%
  group_by(fidx) %>%
  filter(fidx %in% c("A", "I", "U")) %>%
  summarise(Count = n())
kable(count_result, format = "markdown")

```


## Question 10
```{r}
# Find star systems not in system_control.csv
missing_star_systems <- data_syst_ctrl$star_code[!(data$star_code %in% data_syst_ctrl$star_code)]

# Output the number of missing star systems
cat("Number of star systems not found in system_control.csv:", length(missing_star_systems))

```

## Question 11

```{r}
merged_data <- merge(data_syst_ctrl, data_factions, by = "fidx")
active_factions <- merged_data[merged_data$`NAME OF THE FACTION` != c("U","A","I"), ]

# Count the number of star systems controlled by each faction
faction_counts <- table(active_factions$`NAME OF THE FACTION`)

# Create a bar plot
ggplot(data = data.frame(Faction = names(faction_counts), Star_Systems = as.numeric(faction_counts)),
       aes(x = reorder(Faction, -Star_Systems), y = Star_Systems, fill = Faction)) +
  geom_bar(stat = "identity") +
  labs(title = "Number of Star Systems Controlled by Each Faction",
       x = "Faction",
       y = "Number of Star Systems") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
```

## Question 12
```{r}
merged_data_2 <- merge(active_factions, data, by = "star_code")

ggplot(merged_data_2, aes(x = `NAME OF THE FACTION`, y = `DISTANCE FROM THE SUN`, fill = `NAME OF THE FACTION`)) +
  geom_boxplot() +
  labs(x = "Controlling Faction",
       y = "Distance from the Sun (light years)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

## Question 13

```{r}

```

